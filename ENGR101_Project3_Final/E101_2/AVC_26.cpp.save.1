#include <iostream>
#include "E101.h"

using namespace std;

void motors(int v_left,int v_right){
	set_motors(1, v_left);
	set_motors(5, v_right);
	hardware_exchange();
}

void camMotorToggle(){
	
	hardware_exchange();
}

void q4()
{
	cout<<"Quadrant 4 chosen"<<endl;
	camMotor(53);
	sleep1(1000);
	camMotor(48);
	hardware_exchange();
}

void q3()
{
	cout<<"Quadrant 3 chosen"<<endl;
	int leftCol = 10;
	int rightCol = 300;
	int topRow = 10;
	
	int count = 0;
	while(count < 500)
	{
		take_picture();
		update_screen();
		
		bool leftPath = false;
		bool rightPath = false;
		bool topPath = false;
	
		double leftError = 0;
		double rightError = 0;
		double topError = 0;
		
		for(int row=0; row < 240; row++)
		{
			int lum = (int)get_pixel(row, leftCol, 3);
			if(lum < 100){leftPath = true;}
			leftError = leftError + (lum<100)*(row-120);
		}
		
		for(int row=0; row < 240; row++)
		{
			int lum = (int)get_pixel(row, rightCol, 3);
			if(lum < 100){rightPath = true;}
			rightError = rightError + (lum<100)*(row-120);
		}
		
		for(int col=0; col < 320; col++)
		{
			int lum = (int)get_pixel(topRow, col, 3);
			if(lum < 100){topPath = true;}
			topError = topError + (lum<100)*(col-160);
		}
		cout<<"Left path: "<<leftPath<<endl;
		cout<<"Right path: "<<rightPath<<endl;
		cout<<"Top path: "<<topPath<<endl;
		
		if(leftPath && leftError > -500 && leftError < 500) {
			//Turn left
			cout<<"Turn left"<<endl;
		}
		else if(topPath || leftPath || rightPath && (rightError < -500 | rightError > 500)) {
			//Go straight ahead
			cout<<"Going straight"<<endl;
		}
		else if(rightPath && rightError > -500 && rightError < 500) {
			// Turn right
			cout<<"Turn right"<<endl;
		}
		else {
			//U-turn
			cout<<"U-turn"<<endl;
		}
		count = 501;
		q4();
	}
}

void q2()
{
	cout<<"Quadrant 2 chosen"<<endl;
	int count = 0;
	bool detectRed = false;
	bool lastStateLeft = false;
	while(detectRed != true)
	{	
		take_picture();
		update_screen();	
		double error=0;
		for(int col=0; col < 320; col++) {
			int lum = (int)get_pixel(120, col, 3);
			error = error + (lum<80)*(col-160);
		}
		cout<<endl;
		cout<<error<<endl;
		int redPixels = 0;
		for(int col = 0; col < 320; col++) {
			for(int row = 0; row < 240; row++)
			{
				double redness = (double)get_pixel(row, col, 0)/(double)get_pixel(row, col, 3);
				if(redness > 2)
				{
					redPixels++;
				}
			}
		}
		if(redPixels > 38000)
		{
			detectRed = true;
			cout<<"Red detected"<<endl;
		}
		if(error > 2000) {
			motors(53, 48);
			lastStateLeft = false;
			cout<<"Tilt right"<<endl;
		}
		else if(error < -2000)
		{
			motors(48, 43);
			lastStateLeft = true;
			cout<<"Tilt left"<<endl;
		}
		else if(error == 0)
		{
			motors(45, 51);
		}
		else
		{
			motors(55, 41);
			cout<<"STEADY"<<endl;
		}
		std::cout<<count<<std::endl;
		count++;
		sleep1(100);
	}
	q3();
}

void q1()
{
	cout<<"Quadrant 1 chosen"<<endl;
	char server_addr[15] = {'1', '3', '0', '.', '1', '9', '5', '.', '3', '.', '9', '1'};
	int port = 1024;
	connect_to_server(server_addr, port);
	char please[24] = {'P','l','e','a','s','e'};
	send_to_server(please);
	char password[24];
	receive_from_server(password);
	send_to_server(password);

	motors(65,30);
	sleep1(2500);
	q2();
}

int main()
{
	int err;
	cout<<"TESTING123"<<endl;
	err = init(0);
	cout<<"After init() error="<<err<<endl;
	open_screen_stream();
	q4();
	return 0;
}
